using System;
using System.Collections.Generic;
using RectanglesForm.Helpers;
using NUnit.Framework;
using System.Drawing;

namespace RectanglesBuilderTests
{
    [TestFixture]
    public class RectangleBuilderTests
    {
        [Test]
        public void GivenA_NumberOfRectangles_MustReturnAutoGeneratedRectangles()
        {
            var rectangleBuilder = new RectanglesBuilder();
            var yCoordinates = 80;
            var numberOfRectangles = 5;
            
            var results = rectangleBuilder.GenerateInputRectangles(yCoordinates, numberOfRectangles);

            Assert.AreEqual(results.Count, 5);
        }

        [Test]
        public void GivenA_NumberOfRectangles_Which_Is_Less_Than_Three_MustThrowAnException()
        {
            var rectangleBuilder = new RectanglesBuilder();
            var yCoordinates = 80;
            var numberOfRectangles = 1;

            Assert.Throws<Exception>(() => rectangleBuilder.GenerateInputRectangles(yCoordinates, numberOfRectangles));
        }

        [Test]
        public void GivenA_NumberOfRectangles_Which_Is_Less_Than_Three_MustThrowAnExceptionMessage()
        {
            var rectangleBuilder = new RectanglesBuilder();
            var yCoordinates = 80;
            var numberOfRectangles = 1;

            var exception = Assert.Throws<Exception>(() => rectangleBuilder.GenerateInputRectangles(yCoordinates, numberOfRectangles));
            Assert.That(exception.Message, Is.EqualTo("Please enter No Of Rectangles between 3 and 30"));
        }

        [Test]
        public void Given_AnEmptyListOfGeneratedInputRectangles_MustReturnAnEmptyList()
        {
            var rectangleBuilder = new RectanglesBuilder();
            var numberOfRectangles = 1;

            var results = rectangleBuilder.GenerateOutputRectangles(new List<Rectangle>(), numberOfRectangles);

            Assert.AreEqual(0, results.Count);
        }

        [Test]
        public void Given_AListOfGeneratedInputRectangles_MustReturnAListOfOutputRectangles()
        {
            var rectangleBuilder = new RectanglesBuilder();
            var yCoordinates = 80;
            var numberOfRectangles = 5;

            var generatedRectanglesInputList = rectangleBuilder.GenerateInputRectangles(yCoordinates, numberOfRectangles);

            var results = rectangleBuilder.GenerateOutputRectangles(generatedRectanglesInputList, yCoordinates);

            Assert.AreEqual(numberOfRectangles, results.Count);
        }
    }
}
